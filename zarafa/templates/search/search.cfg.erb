## This file is manged by Puppet

##############################################################
# INDEXED SEARCH SERVICE SETTINGS

# Location of the index files
index_path              = /var/lib/zarafa/index/

# run as specific user
run_as_user             = <%= scope.lookupvar('zarafa::params::zarafa_user') %>

# run as specific group
run_as_group            = <%= scope.lookupvar('zarafa::params::zarafa_group') %>

# control pid file
pid_file                = /var/run/zarafa-search.pid

# run server in this path (when not using the -F switch)
running_path            = /

# create memory coredumps upon crash in the running_path directory
coredump_enabled        = no

# Limit the number of results returned (0 = don't limit)
limit_results           = 0

##############################################################
# CONNECTION TO ZARAFA SERVER SETTINGS
#

# Socket to find the connection to the Zarafa server.
# Use https to reach servers over the network
#server_socket           = https://<%= fqdn %>:237/zarafa
server_socket           = file:///var/run/zarafa

# Login to the Zarafa server using this SSL Key
#sslkey_file             = <%= scope.lookupvar('zarafa::params::ssl_key_file_client') %>
sslkey_file             =

# The password of the SSL Key
#sslkey_pass             = <%= scope.lookupvar('zarafa::params::ssl_key_pass_client') %> 
sslkey_pass             =

##############################################################
# LISTEN SETTINGS
#

# binding address
# To setup for multi-server, use: http://0.0.0.0:port or https://0.0.0.0:port
server_bind_name        = file:///var/run/zarafa-search
#server_bind_name        = https://0.0.0.0:8443

# File with RSA key for SSL, used then server_bind_name uses https
ssl_private_key_file    = /etc/zarafa/search/privkey.pem
#ssl_private_key_file    = /etc/zarafa/ssl/<%= hostname %>.pem

# File with certificate for SSL, used then server_bind_name uses https
ssl_certificate_file    = /etc/zarafa/search/cert.pem
#ssl_certificate_file    = /etc/zarafa/ssl/<%= hostname %>-cert.pem

##############################################################
# LOG SETTINGS

# Logging method (syslog, file)
log_method              = syslog

# Loglevel (0=no logging, 5=full logging)
log_level               = <%= scope.lookupvar('zarafa::params::log_level') %>

# Logfile for log_method = file, use '-' for stderr
log_file                = /var/log/zarafa/search.log

# Log timestamp - prefix each log line with timestamp in 'file' logging mode
log_timestamp           = 1


##############################################################
# ADVANCED INDEXED SEARCH SETTINGS

# Size of indexing cache (used for indexing only, not for searching)
term_cache_size         = 64M

# Ignore properties upon indexing
# Only override this setting to expand the list
#index_exclude_properties = 007D 0064 0C1E 0075 678E 678F

##############################################################
# INDEX OPTIMIZATION SCHEDULE

# Start the optimization routine at this hour, in 24h notation.
optimize_start          = 2

# Stop the optimization routine at this hour, in 24h notation.
# The current index that is being optimized is finished before stopping.
optimize_stop           = 5

# Only optimize indexes which wern't optimized for the past X days.
optimize_age            = 7

##############################################################
# ATTACHMENT INDEX SETTINGS

# Should attachments be indexed
index_attachments       = no

# Maximum file size for attachments
index_attachment_max_size    = 5M

# Scripts to attachment to text parser
index_attachment_parser      = /etc/zarafa/searchscripts/attachments_parser

# Maximum amount of memory which a parser may use in bytes (set to 0 for unlimited)
# If this maximum is exceeded the parser will be killed
index_attachment_parser_max_memory   = 0

# Maximim amount of CPU time (in seconds) which a parser may spend on parsing (set to 0 for unlimited)
# If this maximum is exceeded the parser will be killed
index_attachment_parser_max_cputime  = 0

# Filter out parsing of attachment which has a mimetype from this list
# Only the first part of the mime needs to be given, like 'image'.
# This field is SPACE separated
index_attachment_mime_filter         =

# Filter out parsing of attachment which has an extension from this list
# (only tested if mimetype was not found on the attachment)
# This field is SPACE separated
index_attachment_extension_filter    =
